{"ast":null,"code":"export const CREATE_POST_INITIAL = 'CREATE_POST_INITIAL';\nexport const CREATE_POST_REQUEST = 'CREATE_POST_REQUEST';\nexport const CREATE_POST_SUCCESS = 'CREATE_POST_SUCCESS';\nexport const CREATE_POST_FAILURE = 'CREATE_POST_FAILURE';\nexport const FETCH_POSTS_REQUEST = 'FETCH_POSTS_REQUEST';\nexport const FETCH_POSTS_SUCCESS = 'FETCH_POSTS_SUCCESS';\nexport const FETCH_POSTS_FAILURE = 'FETCH_POSTS_FAILURE';\n\nfunction createPostInitial() {\n  return {\n    type: CREATE_POST_INITIAL,\n    isFetching: false\n  };\n}\n\nfunction requestCreatePost(post) {\n  return {\n    type: CREATE_POST_REQUEST,\n    isFetching: true,\n    post\n  };\n}\n\nfunction createPostSuccess(post) {\n  return {\n    type: CREATE_POST_SUCCESS,\n    isFetching: false,\n    post\n  };\n}\n\nfunction createPostError(message) {\n  return {\n    type: CREATE_POST_FAILURE,\n    isFetching: false,\n    message\n  };\n}\n\nfunction requestFetchPosts() {\n  return {\n    type: FETCH_POSTS_REQUEST,\n    isFetching: true\n  };\n}\n\nfunction fetchPostsSuccess(posts) {\n  return {\n    type: FETCH_POSTS_SUCCESS,\n    isFetching: false,\n    posts\n  };\n}\n\nfunction fetchPostsError(message) {\n  return {\n    type: FETCH_POSTS_FAILURE,\n    isFetching: false,\n    message\n  };\n}\n\nexport function createPost(postData) {\n  const config = {\n    method: 'post',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      query: `mutation {\n                addPost(title: \"${postData.title}\", content: \"${postData.content}\"){\n                  id,\n                  title,\n                  content\n                }\n              }`\n    }),\n    credentials: 'include'\n  };\n  return dispatch => {\n    // We dispatch requestCreatePost to kickoff the call to the API\n    dispatch(requestCreatePost(postData));\n\n    if (process.env.NODE_ENV === \"development\") {} else {\n      dispatch(createPostError(''));\n      return Promise.reject();\n    }\n  };\n}\nexport function fetchPosts() {\n  const config = {\n    method: 'post',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      query: '{posts{id,title,content,updatedAt}}'\n    }),\n    credentials: 'include'\n  };\n  return dispatch => {\n    dispatch(requestFetchPosts()); // return fetch('/graphql', config)\n    //   .then(response =>\n    //     response.json().then(responseJson => ({\n    //       posts: responseJson.data.posts,\n    //       responseJson,\n    //     })),\n    //   )\n    //   .then(({ posts, responseJson }) => {\n    //     if (!responseJson.data.posts) {\n    //       // If there was a problem, we want to\n    //       // dispatch the error condition\n    //       dispatch(fetchPostsError(posts.message));\n    //       return Promise.reject(posts);\n    //     }\n    //     // Dispatch the success action\n    //     dispatch(fetchPostsSuccess(posts));\n    //     return Promise.resolve(posts);\n    //   })\n    //   .catch(err => console.error('Error: ', err));\n  };\n}","map":{"version":3,"sources":["/home/daffolap/Documents/work/project/React/rimbun.io-front/src/actions/posts.js"],"names":["CREATE_POST_INITIAL","CREATE_POST_REQUEST","CREATE_POST_SUCCESS","CREATE_POST_FAILURE","FETCH_POSTS_REQUEST","FETCH_POSTS_SUCCESS","FETCH_POSTS_FAILURE","createPostInitial","type","isFetching","requestCreatePost","post","createPostSuccess","createPostError","message","requestFetchPosts","fetchPostsSuccess","posts","fetchPostsError","createPost","postData","config","method","headers","Accept","body","JSON","stringify","query","title","content","credentials","dispatch","process","env","NODE_ENV","Promise","reject","fetchPosts"],"mappings":"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","sourcesContent":["export const CREATE_POST_INITIAL = 'CREATE_POST_INITIAL';\nexport const CREATE_POST_REQUEST = 'CREATE_POST_REQUEST';\nexport const CREATE_POST_SUCCESS = 'CREATE_POST_SUCCESS';\nexport const CREATE_POST_FAILURE = 'CREATE_POST_FAILURE';\nexport const FETCH_POSTS_REQUEST = 'FETCH_POSTS_REQUEST';\nexport const FETCH_POSTS_SUCCESS = 'FETCH_POSTS_SUCCESS';\nexport const FETCH_POSTS_FAILURE = 'FETCH_POSTS_FAILURE';\n\nfunction createPostInitial() {\n  return {\n    type: CREATE_POST_INITIAL,\n    isFetching: false,\n  };\n}\n\nfunction requestCreatePost(post) {\n  return {\n    type: CREATE_POST_REQUEST,\n    isFetching: true,\n    post,\n  };\n}\n\nfunction createPostSuccess(post) {\n  return {\n    type: CREATE_POST_SUCCESS,\n    isFetching: false,\n    post,\n  };\n}\n\nfunction createPostError(message) {\n  return {\n    type: CREATE_POST_FAILURE,\n    isFetching: false,\n    message,\n  };\n}\n\nfunction requestFetchPosts() {\n  return {\n    type: FETCH_POSTS_REQUEST,\n    isFetching: true,\n  };\n}\n\nfunction fetchPostsSuccess(posts) {\n  return {\n    type: FETCH_POSTS_SUCCESS,\n    isFetching: false,\n    posts,\n  };\n}\n\nfunction fetchPostsError(message) {\n  return {\n    type: FETCH_POSTS_FAILURE,\n    isFetching: false,\n    message,\n  };\n}\n\nexport function createPost(postData) {\n  const config = {\n    method: 'post',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      query: `mutation {\n                addPost(title: \"${postData.title}\", content: \"${\n        postData.content\n      }\"){\n                  id,\n                  title,\n                  content\n                }\n              }`,\n    }),\n    credentials: 'include',\n  };\n\n  return dispatch => {\n    // We dispatch requestCreatePost to kickoff the call to the API\n    dispatch(requestCreatePost(postData));\n    if(process.env.NODE_ENV === \"development\") {\n    } else {\n      dispatch(createPostError(''));\n      return Promise.reject();\n    }\n  };\n}\n\nexport function fetchPosts() {\n  const config = {\n    method: 'post',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      query: '{posts{id,title,content,updatedAt}}',\n    }),\n    credentials: 'include',\n  };\n\n  return dispatch => {\n    dispatch(requestFetchPosts());\n\n    // return fetch('/graphql', config)\n    //   .then(response =>\n    //     response.json().then(responseJson => ({\n    //       posts: responseJson.data.posts,\n    //       responseJson,\n    //     })),\n    //   )\n    //   .then(({ posts, responseJson }) => {\n    //     if (!responseJson.data.posts) {\n    //       // If there was a problem, we want to\n    //       // dispatch the error condition\n    //       dispatch(fetchPostsError(posts.message));\n    //       return Promise.reject(posts);\n    //     }\n    //     // Dispatch the success action\n    //     dispatch(fetchPostsSuccess(posts));\n    //     return Promise.resolve(posts);\n    //   })\n    //   .catch(err => console.error('Error: ', err));\n  };\n}\n"]},"metadata":{},"sourceType":"module"}