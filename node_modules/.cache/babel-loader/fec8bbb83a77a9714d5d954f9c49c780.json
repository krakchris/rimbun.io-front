{"ast":null,"code":"import appConfig from '../config';\nimport api, { endPoints } from \"../api\";\nimport * as auth from \"../lib/token\";\nexport const LOGIN_REQUEST = 'LOGIN_REQUEST';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAILURE = 'LOGIN_FAILURE';\nexport const LOGOUT_REQUEST = 'LOGOUT_REQUEST';\nexport const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\nexport const LOGOUT_FAILURE = 'LOGOUT_FAILURE';\n\nfunction requestLogin(creds) {\n  return {\n    type: LOGIN_REQUEST,\n    isFetching: true,\n    isAuthenticated: false,\n    creds\n  };\n}\n\nexport function receiveLogin(user) {\n  return {\n    type: LOGIN_SUCCESS,\n    isFetching: false,\n    isAuthenticated: true,\n    token: auth.getToken()\n  };\n}\n\nfunction loginError(message) {\n  return {\n    type: LOGIN_FAILURE,\n    isFetching: false,\n    isAuthenticated: false,\n    message\n  };\n}\n\nfunction requestLogout() {\n  return {\n    type: LOGOUT_REQUEST,\n    isFetching: true,\n    isAuthenticated: true\n  };\n}\n\nexport function receiveLogout() {\n  return {\n    type: LOGOUT_SUCCESS,\n    isFetching: false,\n    isAuthenticated: false\n  };\n} // Logs the user out\n\nexport function logoutUser() {\n  return dispatch => {\n    dispatch(requestLogout());\n    auth.clearToken();\n    dispatch(receiveLogout());\n  };\n}\nexport function loginUser(creds) {\n  return dispatch => {\n    // We dispatch requestLogin to kickoff the call to the API\n    dispatch(requestLogin(creds));\n    const payload = {\n      email: creds.login,\n      password: creds.password\n    };\n    api(endPoints.login).post(payload).then(response => {\n      auth.setToken(response.data.token);\n      dispatch(receiveLogin({\n        token: response.data.token\n      }));\n    }).catch(error => {\n      const errorMessage = error.response.data.message;\n      dispatch(loginError(errorMessage));\n    });\n  };\n}","map":{"version":3,"sources":["/home/daffolap/Documents/work/project/React/rimbun.io-front/src/actions/user.js"],"names":["appConfig","api","endPoints","auth","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT_REQUEST","LOGOUT_SUCCESS","LOGOUT_FAILURE","requestLogin","creds","type","isFetching","isAuthenticated","receiveLogin","user","token","getToken","loginError","message","requestLogout","receiveLogout","logoutUser","dispatch","clearToken","loginUser","payload","email","login","password","post","then","response","setToken","data","catch","error","errorMessage"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,WAAtB;AACA,OAAOC,GAAP,IAAcC,SAAd,QAA+B,QAA/B;AACA,OAAO,KAAKC,IAAZ,MAAsB,cAAtB;AAEA,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;;AAEP,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,SAAO;AACLC,IAAAA,IAAI,EAAER,aADD;AAELS,IAAAA,UAAU,EAAE,IAFP;AAGLC,IAAAA,eAAe,EAAE,KAHZ;AAILH,IAAAA;AAJK,GAAP;AAMD;;AAED,OAAO,SAASI,YAAT,CAAsBC,IAAtB,EAA4B;AACjC,SAAO;AACLJ,IAAAA,IAAI,EAAEP,aADD;AAELQ,IAAAA,UAAU,EAAE,KAFP;AAGLC,IAAAA,eAAe,EAAE,IAHZ;AAILG,IAAAA,KAAK,EAAEd,IAAI,CAACe,QAAL;AAJF,GAAP;AAMD;;AAED,SAASC,UAAT,CAAoBC,OAApB,EAA6B;AAC3B,SAAO;AACLR,IAAAA,IAAI,EAAEN,aADD;AAELO,IAAAA,UAAU,EAAE,KAFP;AAGLC,IAAAA,eAAe,EAAE,KAHZ;AAILM,IAAAA;AAJK,GAAP;AAMD;;AAED,SAASC,aAAT,GAAyB;AACvB,SAAO;AACLT,IAAAA,IAAI,EAAEL,cADD;AAELM,IAAAA,UAAU,EAAE,IAFP;AAGLC,IAAAA,eAAe,EAAE;AAHZ,GAAP;AAKD;;AAED,OAAO,SAASQ,aAAT,GAAyB;AAC9B,SAAO;AACLV,IAAAA,IAAI,EAAEJ,cADD;AAELK,IAAAA,UAAU,EAAE,KAFP;AAGLC,IAAAA,eAAe,EAAE;AAHZ,GAAP;AAKD,C,CAED;;AACA,OAAO,SAASS,UAAT,GAAsB;AAC3B,SAAOC,QAAQ,IAAI;AACjBA,IAAAA,QAAQ,CAACH,aAAa,EAAd,CAAR;AACAlB,IAAAA,IAAI,CAACsB,UAAL;AACAD,IAAAA,QAAQ,CAACF,aAAa,EAAd,CAAR;AACD,GAJD;AAKD;AAED,OAAO,SAASI,SAAT,CAAmBf,KAAnB,EAA0B;AAE/B,SAAOa,QAAQ,IAAI;AACjB;AACAA,IAAAA,QAAQ,CAACd,YAAY,CAACC,KAAD,CAAb,CAAR;AACA,UAAMgB,OAAO,GAAG;AAAEC,MAAAA,KAAK,EAAEjB,KAAK,CAACkB,KAAf;AAAsBC,MAAAA,QAAQ,EAAEnB,KAAK,CAACmB;AAAtC,KAAhB;AACA7B,IAAAA,GAAG,CAACC,SAAS,CAAC2B,KAAX,CAAH,CACGE,IADH,CACQJ,OADR,EAEGK,IAFH,CAEQC,QAAQ,IAAI;AAChB9B,MAAAA,IAAI,CAAC+B,QAAL,CAAcD,QAAQ,CAACE,IAAT,CAAclB,KAA5B;AACAO,MAAAA,QAAQ,CAACT,YAAY,CAAC;AAAEE,QAAAA,KAAK,EAAEgB,QAAQ,CAACE,IAAT,CAAclB;AAAvB,OAAD,CAAb,CAAR;AACD,KALH,EAMGmB,KANH,CAMSC,KAAK,IAAI;AACd,YAAMC,YAAY,GAAGD,KAAK,CAACJ,QAAN,CAAeE,IAAf,CAAoBf,OAAzC;AACAI,MAAAA,QAAQ,CAACL,UAAU,CAACmB,YAAD,CAAX,CAAR;AACD,KATH;AAWD,GAfD;AAmBD","sourcesContent":["import appConfig from '../config';\nimport api, { endPoints } from \"../api\";\nimport * as auth from \"../lib/token\";\n\nexport const LOGIN_REQUEST = 'LOGIN_REQUEST';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAILURE = 'LOGIN_FAILURE';\nexport const LOGOUT_REQUEST = 'LOGOUT_REQUEST';\nexport const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\nexport const LOGOUT_FAILURE = 'LOGOUT_FAILURE';\n\nfunction requestLogin(creds) {\n  return {\n    type: LOGIN_REQUEST,\n    isFetching: true,\n    isAuthenticated: false,\n    creds,\n  };\n}\n\nexport function receiveLogin(user) {\n  return {\n    type: LOGIN_SUCCESS,\n    isFetching: false,\n    isAuthenticated: true,\n    token: auth.getToken()\n  };\n}\n\nfunction loginError(message) {\n  return {\n    type: LOGIN_FAILURE,\n    isFetching: false,\n    isAuthenticated: false,\n    message,\n  };\n}\n\nfunction requestLogout() {\n  return {\n    type: LOGOUT_REQUEST,\n    isFetching: true,\n    isAuthenticated: true,\n  };\n}\n\nexport function receiveLogout() {\n  return {\n    type: LOGOUT_SUCCESS,\n    isFetching: false,\n    isAuthenticated: false,\n  };\n}\n\n// Logs the user out\nexport function logoutUser() {\n  return dispatch => {\n    dispatch(requestLogout());\n    auth.clearToken();\n    dispatch(receiveLogout());\n  };\n}\n\nexport function loginUser(creds) {\n  \n  return dispatch => {\n    // We dispatch requestLogin to kickoff the call to the API\n    dispatch(requestLogin(creds));\n    const payload = { email: creds.login, password: creds.password };\n    api(endPoints.login)\n      .post(payload)\n      .then(response => {\n        auth.setToken(response.data.token);\n        dispatch(receiveLogin({ token: response.data.token }));\n      })\n      .catch(error => {\n        const errorMessage = error.response.data.message;\n        dispatch(loginError(errorMessage));\n      });\n\n  };\n        \n  \n\n}\n"]},"metadata":{},"sourceType":"module"}